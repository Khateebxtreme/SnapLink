package com.url.shortener.service;

import com.url.shortener.dtos.ClickEventDTO;
import com.url.shortener.dtos.UrlMappingDTO;
import com.url.shortener.models.ClickEvent;
import com.url.shortener.models.UrlMapping;
import com.url.shortener.models.User;
import com.url.shortener.repository.ClickEventRepository;
import com.url.shortener.repository.UrlMappingRepository;
import lombok.AllArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.TreeMap;
import java.util.stream.Collectors;

@Service
@AllArgsConstructor
public class UrlMappingService {

    @Autowired
    private ClickEventRepository clickEventRepository;

    @Autowired
    private UrlMappingRepository urlMappingRepository;

    public UrlMappingDTO createShortUrl(String originalUrl, User user) {
        String shortUrl = generateShortUrl(); //once we have the shortUrl -> we will link the original to it
        UrlMapping urlMapping = new UrlMapping();
        urlMapping.setOriginalUrl(originalUrl);
        urlMapping.setUser(user);
        urlMapping.setCreatedDate(LocalDateTime.now());
        urlMapping.setShortUrl(shortUrl);

        //we will now save these details as an entry to our database through URL mapping repository
        UrlMapping savedUrlMapping = urlMappingRepository.save(urlMapping);
        return convertToDto(savedUrlMapping);
    }

    private UrlMappingDTO convertToDto(UrlMapping urlMapping){
        //as URLMapping entity structure is different from our DTO, we need this method to set up our DTO accordingly.
        UrlMappingDTO urlMappingDTO = new UrlMappingDTO();
        urlMappingDTO.setId(urlMapping.getId());
        urlMappingDTO.setShortUrl(urlMapping.getShortUrl());
        urlMappingDTO.setOriginalUrl(urlMapping.getOriginalUrl());
        urlMappingDTO.setClickCount(urlMapping.getClickCount());
        urlMappingDTO.setCreatedDate(urlMapping.getCreatedDate());
        urlMappingDTO.setUsername(urlMapping.getUser().getUsername());
        return urlMappingDTO;
    }

    public String generateShortUrl() {
        String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        Random random = new Random();
        StringBuilder shortURL = new StringBuilder(10); //length of our short URL is fixed at 10

        for(int i=0;i<=9;i++){
            //we will now select random characters to append to our stringBuilder to generate our shortURL.
            shortURL.append(characters.charAt(random.nextInt(characters.length())));
        }
        return shortURL.toString();
    }

    //method to retrieve all urls generated by a specific user.
    public List<UrlMappingDTO> getUrlsByUser(User user) {
        /*
         We are getting the list of URL mappings from the return statement "urlMappingRepository.findByUser(user)" so for every mapping int the available list, we are converting it (mapping each element) into a DTO type object and the result of map is collected in form of a list.
        */
        return urlMappingRepository.findByUser(user).stream().
                map(this::convertToDto).toList();
    }

    public List<ClickEventDTO> getClickEventsByDate(String shortUrl, LocalDateTime start, LocalDateTime end) {
        UrlMapping urlMapping = urlMappingRepository.findByShortUrl(shortUrl); //will help us retrieve URL mapping ID to handle click_event table which tracks clicks on a url and maps it to urlMapping table through the given shortURL ID.

        if(urlMapping!=null){
            //we have to now find the url mapping and click dates for the short URL from the provided range of dates. We are actually grouping the data obtained from stream by click date.
            //We are fetching all the events (click events) from the provided URL mapping argument between a provided range, we then convert each click event to a DTO type object and storing the same in a list.
            Map<LocalDate, Long> mapping = new TreeMap<>(clickEventRepository.findByUrlMappingAndClickDateBetween(
                    urlMapping, start , end
            ).stream().collect(Collectors.groupingBy(click -> click.getClickDate().toLocalDate(), Collectors.counting())));
            return mapping.entrySet().stream()
                    .map(entry -> {
                        ClickEventDTO clickEventDTO = new ClickEventDTO();
                        clickEventDTO.setClickDate(entry.getKey());
                        clickEventDTO.setCount(entry.getValue());
                        return clickEventDTO;
                    }).collect(Collectors.toList());

        }
        return null;
    }

    public Map<LocalDate, Long> getTotalClicksByUserAndDate(User user, LocalDate start, LocalDate end) {
        List<UrlMapping> urlMappings = urlMappingRepository.findByUser(user);
        List<ClickEvent> clickEvents = clickEventRepository.findByUrlMappingInAndClickDateBetween(urlMappings, start.atStartOfDay(), end.plusDays(1).atStartOfDay());
        //This converts the obtained clickEvents list to a stream to group them by dates and count the group sizes and this is being stored as key and value pairs.
        return clickEvents.stream()
                .collect(Collectors.groupingBy(click -> click.getClickDate().toLocalDate(), Collectors.counting()));
    }

    public UrlMapping getOriginalUrl(String shortUrl) {
        UrlMapping urlMapping = urlMappingRepository.findByShortUrl(shortUrl);
        //as we know a click event happened because we used shortUrl to get our original url. We are first updating the click count in url mapping table by 1, and then we will store a click event in ClickEvent table and update the repository as such.
        if(urlMapping!=null){
            urlMapping.setClickCount(urlMapping.getClickCount() + 1);
            urlMappingRepository.save(urlMapping);
        }
        ClickEvent clickEvent = new ClickEvent();
        clickEvent.setClickDate(LocalDateTime.now());
        clickEvent.setUrlMapping(urlMapping);
        clickEventRepository.save(clickEvent);
        return urlMapping;
    }

    public ResponseEntity<String> deleteUrlFunc(String shortUrl){
        Long shortUrlID = urlMappingRepository.findIdByShortUrl(shortUrl);
        clickEventRepository.deleteByUrlMappingId(shortUrlID);
        urlMappingRepository.deleteById(shortUrlID);
        return new ResponseEntity<>("The following short-Url has been successfully deleted", HttpStatus.OK);
    }
}
