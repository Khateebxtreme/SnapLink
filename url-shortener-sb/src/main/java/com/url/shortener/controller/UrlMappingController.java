package com.url.shortener.controller;

import com.url.shortener.dtos.ClickEventDTO;
import com.url.shortener.dtos.UrlMappingDTO;
import com.url.shortener.models.User;
import com.url.shortener.service.UrlMappingService;
import com.url.shortener.service.UserService;
import lombok.AllArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.security.Principal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

@RestController
@RequestMapping("/api/urls")
@AllArgsConstructor
public class UrlMappingController {
    /*
    Working of Shortening of URLs
    ----------------------------
    1) Users provide the long URL (Non-User Friendly)
    2) We link the user provided long URL to a short URL(which is user friendly and easy to share)
    3) This short URL is generated by the application, and whenever the User tries to access the short URL, they will be redirected to long URLs.
    4) The above process is possible through a one-to-many(one Long URL -> to one or many Short URLs) relationship mapping, to link the long URL to our created short URLs.
     */
    private UrlMappingService urlMappingService;
    private UserService userService;

    @PostMapping("/short")
    @PreAuthorize("hasRole('USER')")
    public ResponseEntity<UrlMappingDTO> createShortUrl(@RequestBody Map<String,String> request,
                                                        Principal principal){
        //UrlMappingDTO is representing a mapped URL.

        //principal object is auto-injected so no workaround is required for the same.In Spring Security, the Principal object represents the currently authenticated user or the user that is logged in currently. It is typically used to provide information about the user who is interacting with the system.It's commonly used in the context of security, especially when implementing user authentication and authorization. Spring manages this with help of security context and manages it, so it can be accessed through the application.

        String originalUrl = request.get("originalUrl"); //{"originalUrl" : source_url}
        String username = principal.getName();
        User user = userService.findByUsername(username); //this method retrieves user details from the username.

        //Service method to create a short URL from the user provided source URL
        UrlMappingDTO urlMappingDTO = urlMappingService.createShortUrl(originalUrl, user);
        return ResponseEntity.ok(urlMappingDTO);

    }

    /*
    Endpoint to get list of all the URLs generated by a particular user.
    */
    @GetMapping("/myurls")
    @PreAuthorize("hasRole('USER')")
    public ResponseEntity<List<UrlMappingDTO>> getUserUrls(Principal principal){
        User user = userService.findByUsername(principal.getName());
        List<UrlMappingDTO> urls = urlMappingService.getUrlsByUser(user); //helps to fetch the user created urls
        return ResponseEntity.ok(urls);
    }

/*

These are analytics endpoint for our urls that are being generated

1) GET /analytics/short-url?startDate=start-date&endDate=end-date

This request helps us get the analytics data for a particular short url that a user has created by date in a given date range.

[
   {
        "clickDate" : click-date,
         "count" : x
   }
]

2) GET /totalClicks?startDate=start-date&endDate=end-date

It helps us get total clicks for all the urls that user owns or has created within a particular date range

{
    "clickDate1" : 5,
     "clickDate2" : 10
}

*/

    @GetMapping("/analytics/{shortUrl}")
    @PreAuthorize("hasRole('USER')")
    public ResponseEntity<List<ClickEventDTO>> getUrlAnalytics(@PathVariable String shortUrl,
                                                               @RequestParam("startDate") String startDate,
                                                               @RequestParam("endDate") String endDate)
    {
        DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME; //formatter for passing ISO 8601 dateTime string -> 2024-12-23T00:00:00

        //formatting the request params start and end dates into ISO 8601 dates
        LocalDateTime start = LocalDateTime.parse(startDate, formatter);
        LocalDateTime end = LocalDateTime.parse(endDate, formatter);

        //method to get all click events in a given time period -> Date and click count for a given URL
        List<ClickEventDTO> clickEventDTOS = urlMappingService.getClickEventsByDate(shortUrl,start,end);
        return ResponseEntity.ok(clickEventDTOS);
    }

    @GetMapping("/totalClicks")
    @PreAuthorize("hasRole('USER')")
    public ResponseEntity<Map<LocalDate, Long>> getTotalClicksByDate(Principal principal, @RequestParam("startDate") String startDate,
                                                                @RequestParam("endDate") String endDate)
    {
        User user = userService.findByUsername(principal.getName()); //retrieves the user which is currently authenticated.
        DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE; //formatter for passing ISO 8601 dateTime string -> 2024-12-23T00:00:00
        //formatting the request params start and end dates into ISO 8601 dates
        LocalDate start = LocalDate.parse(startDate, formatter);
        LocalDate end = LocalDate.parse(endDate, formatter);

        Map<LocalDate, Long> totalClicks = urlMappingService.getTotalClicksByUserAndDate(user,start,end);
        totalClicks = new TreeMap<>(totalClicks);
        return ResponseEntity.ok(totalClicks);
    }

    //Endpoint to delete a specific URL
    @DeleteMapping("/delete/{shortUrl}")
    @PreAuthorize("hasRole('USER')")
    public ResponseEntity<String> deleteUrlByName(@PathVariable String shortUrl){
        return urlMappingService.deleteUrlFunc(shortUrl);
    }
}
